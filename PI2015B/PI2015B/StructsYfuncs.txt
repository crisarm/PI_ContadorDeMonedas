struct VECTOR4D
{
	union
	{
		struct 
		{
			float x, y, z, w;
		}
		float vector[4];
	}
}

struct MATRIX4D
{
	union
	{
		struct
		{
			float m00, m01, m02, m03;
			float m10, m11, m12, m13;
			float m20, m21, m22, m23;
			float m30, m31, m32, m33;
		}
		float m[4][5];
		float v[16];
	}
}

// OPERACIONES A IMPLEMENTAR
float Dot( VECTOR4D &A, VECTOR4D &B )
VECTOR4D Cross3( VECTOR4D &A, VECTOR4D &B ); //w=0
VECTOR4D operator*( VECTOR4D &A, VECTOR4D &B ); 
VECTOR4D operator*( VECTOR4D &A, float s ); 
VECTOR4D operator*( float s, VECTOR4D &A ); 
VECTOR4D operator+( VECTOR4D &A, VECTOR4D &B ); 
float SqMag( VECTOR4D &A ); // Dot(A,A);

// OPERACIONES CON MATRICES Y VECTORES A IMPLEMENTAR
MATRIX4D Identy();
MATRIX4D Zero();
MATRIX4D RotationAxis( Vector4D Axis, fload theta) //Cuaternios (Opcional)
MATRIX4D RotationX( float theta ); //Left Handled
MATRIX4D RotationY( float theta ); //Left Handled
MATRIX4D RotationZ( float theta ); //Left Handled
MATRIX4D operator*( MATRIX4D &A, MATRIX4D &B );
MATRIX4D operator*( VECTOR4D &V, MATRIX4D &M );
MATRIX4D operator*( MATRIX4D &M, VECTOR4D &V );
MATRIX4D Transpose( MATRIX4D &M );
MATRIX4D Det( MATRIX4D &M ); //Determinante (Opcional)
MATRIX4D Inverse( MATRIX4D &M );

float Dot( VECTOR4D &A, VECTOR4D &B ){
	return A.x * B.x +
		   A.y * B.y +
		   A.z * B.z +
		   A.w * B.w;
}
